/**
* This file is generated by Overture's VDM-to-C code generator version 0.1.9-SNAPSHOT.
* Website: https://github.com/overturetool/vdm2c
*/

#ifndef CLASSES_Controller_H_
#define CLASSES_Controller_H_

#define VDM_CG

#include "Vdm.h"

/*  include types used in the class */
#include "IntPort.h"
#include "HardwareInterface.h"
#include "IO.h"
#include "BoolPort.h"
#include "Controller.h"
#include "RealPort.h"


/* -------------------------------
 *
 * Quotes
 *
 --------------------------------- */ 
 


/* -------------------------------
 *
 * values / global const
 *
 --------------------------------- */ 
 
extern TVP numFields_1;


/* -------------------------------
 *
 * The class
 *
 --------------------------------- */ 
 

/*  class id  */
#define CLASS_ID_Controller_ID 0

#define ControllerCLASS struct Controller*

/*  The vtable ids  */
#define CLASS_Controller__Z10ControllerE17CHardwareInterface 0
#define CLASS_Controller__Z4stepEV 1
#define CLASS_Controller__Z10ControllerEV 2

struct Controller
{
	
/* Definition of Class: 'Controller' */
	VDM_CLASS_BASE_DEFINITIONS(Controller);
	 
	VDM_CLASS_FIELD_DEFINITION(Controller,numFields);
	VDM_CLASS_FIELD_DEFINITION(Controller,hwi);
	
};


/* -------------------------------
 *
 * Constructors
 *
 --------------------------------- */ 
 
  
  	/* Controller.vdmrt 7:9 */
	TVP _Z10ControllerE17CHardwareInterface(ControllerCLASS this_, TVP phwi); 
  	/* Controller.vdmrt 1:7 */
	TVP _Z10ControllerEV(ControllerCLASS this_); 


/* -------------------------------
 *
 * public access functions
 *
 --------------------------------- */ 
 
	void Controller_const_init();
	void Controller_const_shutdown();
	void Controller_static_init();
	void Controller_static_shutdown();


/* -------------------------------
 *
 * Internal
 *
 --------------------------------- */ 
 

void Controller_free_fields(ControllerCLASS);
ControllerCLASS Controller_Constructor(ControllerCLASS);



#endif /* CLASSES_Controller_H_ */
