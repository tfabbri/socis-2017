#ifndef GENERATED_ASN1SCC_DATAVIEW_UNIQ_H
#define GENERATED_ASN1SCC_DATAVIEW_UNIQ_H
/*
Code automatically generated by asn1scc tool
*/
#include "asn1crt.h"

#ifdef  __cplusplus
extern "C" {
#endif



typedef double asn1SccFmiReal;

#define asn1SccFmiReal_REQUIRED_BYTES_FOR_ENCODING       13 
#define asn1SccFmiReal_REQUIRED_BITS_FOR_ENCODING        104
#define asn1SccFmiReal_REQUIRED_BYTES_FOR_ACN_ENCODING   13 
#define asn1SccFmiReal_REQUIRED_BITS_FOR_ACN_ENCODING    104
#define asn1SccFmiReal_REQUIRED_BYTES_FOR_XER_ENCODING   69

void asn1SccFmiReal_Initialize(asn1SccFmiReal* pVal);
flag asn1SccFmiReal_IsConstraintValid(const asn1SccFmiReal* val, int* pErrCode);
#ifndef ERR_asn1SccFmiReal 
#define ERR_asn1SccFmiReal		1001  /*(-1.00000000000000000000E+003 .. 1.00000000000000000000E+003)*/
#endif

typedef flag asn1SccFmiBoolean;

#define asn1SccFmiBoolean_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccFmiBoolean_REQUIRED_BITS_FOR_ENCODING        1
#define asn1SccFmiBoolean_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccFmiBoolean_REQUIRED_BITS_FOR_ACN_ENCODING    1
#define asn1SccFmiBoolean_REQUIRED_BYTES_FOR_XER_ENCODING   38

void asn1SccFmiBoolean_Initialize(asn1SccFmiBoolean* pVal);
flag asn1SccFmiBoolean_IsConstraintValid(const asn1SccFmiBoolean* val, int* pErrCode);


typedef struct {    int nCount; 
    
    byte arr[255];
} asn1SccFmiString;

#define asn1SccFmiString_REQUIRED_BYTES_FOR_ENCODING       256 
#define asn1SccFmiString_REQUIRED_BITS_FOR_ENCODING        2048
#define asn1SccFmiString_REQUIRED_BYTES_FOR_ACN_ENCODING   256 
#define asn1SccFmiString_REQUIRED_BITS_FOR_ACN_ENCODING    2048
#define asn1SccFmiString_REQUIRED_BYTES_FOR_XER_ENCODING   533

void asn1SccFmiString_Initialize(asn1SccFmiString* pVal);
flag asn1SccFmiString_IsConstraintValid(const asn1SccFmiString* val, int* pErrCode);
#ifndef ERR_asn1SccFmiString 
#define ERR_asn1SccFmiString		1002  /*(SIZE(0 .. 255))*/
#endif

typedef asn1SccSint asn1SccT_Int32;

#define asn1SccT_Int32_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccT_Int32_REQUIRED_BITS_FOR_ENCODING        32
#define asn1SccT_Int32_REQUIRED_BYTES_FOR_ACN_ENCODING   4 
#define asn1SccT_Int32_REQUIRED_BITS_FOR_ACN_ENCODING    32
#define asn1SccT_Int32_REQUIRED_BYTES_FOR_XER_ENCODING   39

void asn1SccT_Int32_Initialize(asn1SccT_Int32* pVal);
flag asn1SccT_Int32_IsConstraintValid(const asn1SccT_Int32* val, int* pErrCode);
#ifndef ERR_asn1SccT_Int32 
#define ERR_asn1SccT_Int32		1003  /*(-2147483648 .. 2147483647)*/
#endif

typedef asn1SccT_Int32 asn1SccFmiInterger;

#define asn1SccFmiInterger_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccFmiInterger_REQUIRED_BITS_FOR_ENCODING        32
#define asn1SccFmiInterger_REQUIRED_BYTES_FOR_ACN_ENCODING   4 
#define asn1SccFmiInterger_REQUIRED_BITS_FOR_ACN_ENCODING    32
#define asn1SccFmiInterger_REQUIRED_BYTES_FOR_XER_ENCODING   47

void asn1SccFmiInterger_Initialize(asn1SccFmiInterger* pVal);
flag asn1SccFmiInterger_IsConstraintValid(const asn1SccFmiInterger* val, int* pErrCode);


typedef asn1SccUint asn1SccT_UInt32;

#define asn1SccT_UInt32_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccT_UInt32_REQUIRED_BITS_FOR_ENCODING        32
#define asn1SccT_UInt32_REQUIRED_BYTES_FOR_ACN_ENCODING   4 
#define asn1SccT_UInt32_REQUIRED_BITS_FOR_ACN_ENCODING    32
#define asn1SccT_UInt32_REQUIRED_BYTES_FOR_XER_ENCODING   41

void asn1SccT_UInt32_Initialize(asn1SccT_UInt32* pVal);
flag asn1SccT_UInt32_IsConstraintValid(const asn1SccT_UInt32* val, int* pErrCode);
#ifndef ERR_asn1SccT_UInt32 
#define ERR_asn1SccT_UInt32		1004  /*(0 .. 4294967295)*/
#endif

typedef asn1SccSint asn1SccT_Int8;

#define asn1SccT_Int8_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_Int8_REQUIRED_BITS_FOR_ENCODING        8
#define asn1SccT_Int8_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccT_Int8_REQUIRED_BITS_FOR_ACN_ENCODING    8
#define asn1SccT_Int8_REQUIRED_BYTES_FOR_XER_ENCODING   37

void asn1SccT_Int8_Initialize(asn1SccT_Int8* pVal);
flag asn1SccT_Int8_IsConstraintValid(const asn1SccT_Int8* val, int* pErrCode);
#ifndef ERR_asn1SccT_Int8 
#define ERR_asn1SccT_Int8		1005  /*(-128 .. 127)*/
#endif

typedef asn1SccUint asn1SccT_UInt8;

#define asn1SccT_UInt8_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_UInt8_REQUIRED_BITS_FOR_ENCODING        8
#define asn1SccT_UInt8_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccT_UInt8_REQUIRED_BITS_FOR_ACN_ENCODING    8
#define asn1SccT_UInt8_REQUIRED_BYTES_FOR_XER_ENCODING   39

void asn1SccT_UInt8_Initialize(asn1SccT_UInt8* pVal);
flag asn1SccT_UInt8_IsConstraintValid(const asn1SccT_UInt8* val, int* pErrCode);
#ifndef ERR_asn1SccT_UInt8 
#define ERR_asn1SccT_UInt8		1006  /*(0 .. 255)*/
#endif

typedef flag asn1SccT_Boolean;

#define asn1SccT_Boolean_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_Boolean_REQUIRED_BITS_FOR_ENCODING        1
#define asn1SccT_Boolean_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define asn1SccT_Boolean_REQUIRED_BITS_FOR_ACN_ENCODING    1
#define asn1SccT_Boolean_REQUIRED_BYTES_FOR_XER_ENCODING   36

void asn1SccT_Boolean_Initialize(asn1SccT_Boolean* pVal);
flag asn1SccT_Boolean_IsConstraintValid(const asn1SccT_Boolean* val, int* pErrCode);


 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

flag asn1SccFmiReal_Encode(const asn1SccFmiReal* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccFmiReal_Decode(asn1SccFmiReal* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccFmiBoolean_Encode(const asn1SccFmiBoolean* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccFmiBoolean_Decode(asn1SccFmiBoolean* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccFmiString_Encode(const asn1SccFmiString* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccFmiString_Decode(asn1SccFmiString* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccT_Int32_Encode(const asn1SccT_Int32* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccT_Int32_Decode(asn1SccT_Int32* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccFmiInterger_Encode(const asn1SccFmiInterger* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccFmiInterger_Decode(asn1SccFmiInterger* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccT_UInt32_Encode(const asn1SccT_UInt32* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccT_UInt32_Decode(asn1SccT_UInt32* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccT_Int8_Encode(const asn1SccT_Int8* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccT_Int8_Decode(asn1SccT_Int8* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccT_UInt8_Encode(const asn1SccT_UInt8* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccT_UInt8_Decode(asn1SccT_UInt8* pVal, BitStream* pBitStrm, int* pErrCode);
flag asn1SccT_Boolean_Encode(const asn1SccT_Boolean* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag asn1SccT_Boolean_Decode(asn1SccT_Boolean* pVal, BitStream* pBitStrm, int* pErrCode); 


#ifdef  __cplusplus
}

#endif

#endif
